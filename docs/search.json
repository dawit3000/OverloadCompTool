[{"path":"/articles/catool-walkthrough.html","id":"introduction","dir":"Articles","previous_headings":"","what":"🔍 Introduction","title":"catool: Walkthrough","text":"vignette demonstrates use catool R package calculate fair transparent overload compensation college instructors, based institutional course schedules compensation policies. package supports analysis individual instructors full teaching schedules using well-defined eligibility proration rules based enrollment credit hour thresholds.","code":""},{"path":"/articles/catool-walkthrough.html","id":"prepare-your-schedule-data","dir":"Articles","previous_headings":"","what":"🏫 Prepare Your Schedule Data","title":"catool: Walkthrough","text":"use catool, schedule data must include minimum: INSTRUCTOR: Instructor name (e.g., “Baker, Danielle”) ENRLD: Enrollment count course HRS: Credit hours course 📂 Sample input: schedule.csv file “inst/extdata” folder provides realistic example course schedule data used package. includes columns SUBJ, CRN, INSTRUCTOR,DEPARTMENT COLLEGE fields. extended data including subject codes, departments, colleges, programs, make sure columns labeled SUBJ, DEPARTMENT, COLLEGE, PROGRAM respectively.","code":"schedule <- data.frame(   INSTRUCTOR = c(\"Lalau-Hitchcock, Diksha\", \"Lalau-Hitchcock, Diksha\", \"Brown, Cecily\"),   ENRLD = c(12, 7, 4),   HRS = c(3, 3, 3),   stringsAsFactors = FALSE )"},{"path":"/articles/catool-walkthrough.html","id":"filter-schedules-with-filter_schedule","dir":"Articles","previous_headings":"","what":"🔎 Filter Schedules with filter_schedule()","title":"catool: Walkthrough","text":"can filter schedule using subject codes, instructor names, department, college, program using pattern matching.","code":"# Filter by subject pattern filter_schedule(schedule, subject_pattern = \"MATH|CSCI\")  # Filter by instructor filter_schedule(schedule, instructor_pattern = \"Armbruster|al-Abdul\")  # Filter by department filter_schedule(schedule, department_pattern = \"Business Administration\")  # Filter by college filter_schedule(schedule, college_pattern = \"arts\")  # Filter by program filter_schedule(schedule, program_pattern = \"computation\")"},{"path":"/articles/catool-walkthrough.html","id":"analyze-one-instructor","dir":"Articles","previous_headings":"","what":"👤 Analyze One Instructor","title":"catool: Walkthrough","text":"","code":"# Filter by instructor name (case-insensitive) inst_schedule <- get_instructor_schedule(\"Lalau-Hitchcock\", schedule)  # Calculate overload compensation using default policy ol_comp(inst_schedule)  # You can also apply custom policy parameters ol_comp(inst_schedule, L = 4, U = 8, reg_load = 9, rate_per_cr = 5000 / 3)  # Compare institutional vs instructor interest ol_comp(inst_schedule, favor_institution = TRUE)  # Less pay ol_comp(inst_schedule, favor_institution = FALSE) # More pay"},{"path":"/articles/catool-walkthrough.html","id":"see-all-instructors-in-the-schedule","dir":"Articles","previous_headings":"","what":"👥 See All Instructors in the Schedule","title":"catool: Walkthrough","text":"","code":"get_unique_instructors(schedule)"},{"path":"/articles/catool-walkthrough.html","id":"analyze-by-instructor-index","dir":"Articles","previous_headings":"","what":"🔢 Analyze by Instructor Index","title":"catool: Walkthrough","text":"","code":"# Get summary for a specific instructor by index ol_comp_byindex(1, schedule_df = schedule)  # With custom policy ol_comp_byindex(1, schedule_df = schedule, L = 4, U = 9, reg_load = 12, rate_per_cr = 2500 / 3)"},{"path":"/articles/catool-walkthrough.html","id":"summarize-all-instructors","dir":"Articles","previous_headings":"","what":"📋 Summarize All Instructors","title":"catool: Walkthrough","text":"ol_comp_summary() function generates comprehensive compensation report instructors schedule. Purpose: Aggregate overload pay calculations payroll administration. Enforce consistent application institutional policy. Default usage: Custom policy parameters: Compare strategies instructors: output formatted easy import Excel use administrative reports.","code":"ol_comp_summary(schedule) ol_comp_summary(schedule, L = 4, U = 9, reg_load = 12, rate_per_cr = 2500 / 3) # Favoring institution (less total pay) ol_comp_summary(schedule, favor_institution = TRUE)  # Favoring instructor (more total pay) ol_comp_summary(schedule, favor_institution = FALSE)"},{"path":"/articles/catool-walkthrough.html","id":"policy-logic","dir":"Articles","previous_headings":"","what":"⚖️ Policy Logic","title":"catool: Walkthrough","text":"Default institutional policy: Regular teaching load = 12 credit hours Courses ENRLD < 4 excluded Qualified credit hours beyond regular load paid $2,500 / 3 per hour ENRLD < 10, pay prorated: \\[ \\text{Compensation} = \\left(\\frac{\\text{ENRLD}}{10}\\right) \\times \\text{rate per CR} \\times \\text{qualified CR} \\] Overload hours assigned based favor_institution strategy: favor_institution = TRUE, least-enrolled eligible courses counted toward overload favor_institution = FALSE, -enrolled eligible courses preserved compensation","code":""},{"path":"/articles/catool-walkthrough.html","id":"instructor-vs-institutional-interest-inclination-strategy","dir":"Articles","previous_headings":"","what":"🧭 Instructor vs Institutional Interest Inclination Strategy","title":"catool: Walkthrough","text":"can specify regular teaching load assigned determining overload pay: favor_institution = TRUE → Favor institutional interest → Assign high-enrollment courses regular load first → Leaves low-enrollment courses compensation → Results less total pay favor_institution = FALSE → Favor instructor interest → Assign low-enrollment courses regular load first → Leaves high-enrollment courses compensation → Results total pay option supported ol_comp() ol_comp_summary() functions.","code":""},{"path":"/articles/catool-walkthrough.html","id":"questions","dir":"Articles","previous_headings":"","what":"📨 Questions?","title":"catool: Walkthrough","text":"questions feedback, please open GitHub issue contact Dawit Aberra aberrad@fvsu.edu.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dawit Aberra. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aberra D (2025). catool: Compensation Analysis Tool Instructor Overload Pay. R package version 1.0.0, https://github.com/dawit3000/catool.","code":"@Manual{,   title = {catool: Compensation Analysis Tool for Instructor Overload Pay},   author = {Dawit Aberra},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/dawit3000/catool}, }"},{"path":"/index.html","id":"catool-compensation-analysis-tool","dir":"","previous_headings":"","what":"Compensation Analysis Tool for Instructor Overload Pay","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"catool (Compensation Analysis Tool) R package calculates fair transparent overload pay college instructors. analyzes course schedules applies institutional policy rules determine qualified credit hours compensation—prorated needed.","code":""},{"path":"/index.html","id":"wrench-key-features","dir":"","previous_headings":"","what":"🔧 Key Features","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"Filters -enrolled ineligible courses Calculates overload based qualified credit hours Prorates pay enrollments specified threshold Sorts courses enrollment counts lowest Supports instructor- institution-favoring strategies Produces clear summary tables individual full-schedule use Tidy tibble output, ready export reporting","code":""},{"path":"/index.html","id":"package-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"","code":"# Install from GitHub # install.packages(\"remotes\") remotes::install_github(\"dawit3000/catool\")"},{"path":"/index.html","id":"card_index_dividers-input-format","dir":"","previous_headings":"","what":"🗂️ Input Format","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"course schedule data must include: Optional: SUBJ, DEPARTMENT, COLLEGE, PROGRAM advanced filtering. 📂 Sample input: schedule.csv file provides realistic example course schedule data used package. includes columns SUBJ, CRN, INSTRUCTOR, DEPARTMENT, COLLEGE.","code":""},{"path":"/index.html","id":"test_tube-quick-start","dir":"","previous_headings":"","what":"🧪 Quick Start","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"","code":"library(catool)  schedule <- data.frame(   INSTRUCTOR = c(\"al-Abdul\", \"baxter\", \"Smith, Courtney\"),   ENRLD = c(12, 7, 4),   HRS = c(3, 3, 3) )  # Analyze one instructor ol_comp(get_instructor_schedule(\"baxter\", schedule))  # Apply one instructor with  a custom policy ol_comp(get_instructor_schedule(\"Smith\", schedule),         L = 4, U = 9, rate_per_cr = 2500 / 3, reg_load = 12)  # Summarize full schedule (patroll ready summary of all instructors in the schedule) ol_comp_summary(schedule)"},{"path":"/index.html","id":"mag-filtering-options","dir":"","previous_headings":"","what":"🔍 Filtering Options","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"","code":"# Filter by subject filter_schedule(schedule, subject_pattern = \"MATH|STAT\") filter_schedule(schedule, subject_pattern = \"^MATH|^STAT\") # If subject codes are always exact prefixes  # Filter by department filter_schedule(schedule, department_pattern = \"Business\")  # Filter by instructor get_instructor_schedule(\"davis\", schedule)  # List all instructors get_unique_instructors(schedule)"},{"path":"/index.html","id":"bar_chart-output-structure","dir":"","previous_headings":"","what":"📊 Output Structure","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"ol_comp_summary() function returns clean tibble : QUALIFIED_CR: Credit hours regular load, eligible pay ROW_AMOUNT: Calculated compensation per row TYPE: \"PRORATED\" ENRLD < 10, blank otherwise SUMMARY: Instructor headers, notes, totals Note: Pay never per-course—qualified credit hours.","code":""},{"path":"/index.html","id":"balance_scale-policy-logic","dir":"","previous_headings":"","what":"⚖️ Policy Logic","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"Default institutional policy: Regular teaching load = 12 credit hours Courses ENRLD < 4 excluded Qualified credit hours beyond regular load paid $2,500 / 3 per hour ENRLD < 10, pay prorated: $$ \\text{Compensation} = \\left(\\frac{\\text{ENRLD}}{10}\\right) \\times \\text{rate per CR} \\times \\text{qualified CR} $$ Overload hours counted starting least-enrolled eligible courses","code":""},{"path":"/index.html","id":"compass-instructor-vs-institutional-interest-inclination-strategy","dir":"","previous_headings":"","what":"🧭 Instructor vs Institutional Interest Inclination Strategy","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"can specify regular teaching load assigned determining overload pay: favor_institution = TRUE → Favor institutional interest → Assign high-enrollment courses regular load first → Leaves low-enrollment courses compensation → Results less total pay favor_institution = FALSE → Favor instructor interest → Assign low-enrollment courses regular load first → Leaves high-enrollment courses compensation → Results total pay option supported ol_comp() ol_comp_summary() functions.","code":""},{"path":"/index.html","id":"open_book-full-walkthrough","dir":"","previous_headings":"","what":"📖 Full Walkthrough","title":"Compensation Analysis Tool for Instructor Overload Pay","text":"🔗 Vignette & Examples","code":""},{"path":"/reference/filter_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Course Schedule by College, Department, Program, Subject, and/or Instructor — filter_schedule","title":"Filter Course Schedule by College, Department, Program, Subject, and/or Instructor — filter_schedule","text":"Applies one filters course schedule using pattern matching instructor, subject, college, department, program. matching case-insensitive based partial string matching.","code":""},{"path":"/reference/filter_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Course Schedule by College, Department, Program, Subject, and/or Instructor — filter_schedule","text":"","code":"filter_schedule(   schedule,   subject_pattern = NULL,   instructor_pattern = NULL,   college_pattern = NULL,   department_pattern = NULL,   program_pattern = NULL )"},{"path":"/reference/filter_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Course Schedule by College, Department, Program, Subject, and/or Instructor — filter_schedule","text":"schedule data frame containing course schedule required columns: INSTRUCTOR, SUBJ. Optional columns include: COLLEGE, DEPARTMENT, PROGRAM. subject_pattern Optional regex pattern match subject codes (e.g., \"CSCI\", \"^MATH\"). instructor_pattern Optional regex pattern match instructor names (e.g., \"Smith\", \"^Jones\"). college_pattern Optional regex pattern match college names (e.g., \"Science\", \"Engineering\"). department_pattern Optional regex pattern match department names (e.g., \"Math\", \"Biology\"). program_pattern Optional regex pattern match program names (e.g., \"Undergraduate\", \"MBA\").","code":""},{"path":"/reference/filter_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Course Schedule by College, Department, Program, Subject, and/or Instructor — filter_schedule","text":"filtered data frame matching courses.","code":""},{"path":"/reference/filter_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Course Schedule by College, Department, Program, Subject, and/or Instructor — filter_schedule","text":"","code":"schedule <- data.frame(   INSTRUCTOR = c(\"Lee\", \"Smith\", \"Jones\", \"Dawson\", \"Garcia\"),   SUBJ = c(\"MATH\", \"NURS\", \"CSCI\", \"ENGL\", \"COMM\"),   COLLEGE = c(\"Science\", \"Nursing\", \"Science\", \"Arts and Sciences\", \"Arts and Communication\"),   DEPARTMENT = c(\"Math\", \"Nursing\", \"CS\", \"English\", \"Comm Studies\"),   PROGRAM = c(\"BS\", \"BSN\", \"BS\", \"BA\", \"BA\"),   stringsAsFactors = FALSE )  filter_schedule(schedule, subject_pattern = \"^MATH|^STAT\") #>   INSTRUCTOR SUBJ COLLEGE DEPARTMENT PROGRAM #> 1        Lee MATH Science       Math      BS filter_schedule(schedule, instructor_pattern = \"smith\") #>   INSTRUCTOR SUBJ COLLEGE DEPARTMENT PROGRAM #> 1      Smith NURS Nursing    Nursing     BSN filter_schedule(schedule, college_pattern = \"Science\") #>   INSTRUCTOR SUBJ           COLLEGE DEPARTMENT PROGRAM #> 1        Lee MATH           Science       Math      BS #> 2      Jones CSCI           Science         CS      BS #> 3     Dawson ENGL Arts and Sciences    English      BA filter_schedule(schedule, department_pattern = \"Comm\") #>   INSTRUCTOR SUBJ                COLLEGE   DEPARTMENT PROGRAM #> 1     Garcia COMM Arts and Communication Comm Studies      BA filter_schedule(schedule, program_pattern = \"^BA$\") #>   INSTRUCTOR SUBJ                COLLEGE   DEPARTMENT PROGRAM #> 1     Dawson ENGL      Arts and Sciences      English      BA #> 2     Garcia COMM Arts and Communication Comm Studies      BA"},{"path":"/reference/get_division_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Course Schedule by Division — get_division_schedule","title":"Filter Course Schedule by Division — get_division_schedule","text":"Returns subset course schedule specified academic division. Users may optionally pass custom subject map. provided, default institutional map used.","code":""},{"path":"/reference/get_division_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Course Schedule by Division — get_division_schedule","text":"","code":"get_division_schedule(division_name, schedule, subject_map = NULL)"},{"path":"/reference/get_division_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Course Schedule by Division — get_division_schedule","text":"division_name character string naming academic division. schedule data frame containing SUBJ column (subject code). subject_map Optional named list mapping division names subject codes.","code":""},{"path":"/reference/get_division_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Course Schedule by Division — get_division_schedule","text":"filtered data frame courses specified division.","code":""},{"path":"/reference/get_division_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Course Schedule by Division — get_division_schedule","text":"","code":"schedule <- data.frame(SUBJ = c(\"MATH\", \"NURS\", \"BIOL\")) get_division_schedule(\"Natural and Computational Sciences\", schedule) #>   SUBJ #> 1 MATH #> 2 BIOL get_division_schedule(\"Nursing\", schedule) #>   SUBJ #> 1 NURS get_division_schedule(\"Nursing\", schedule, subject_map = list(Nursing = \"NURS\")) #>   SUBJ #> 1 NURS"},{"path":"/reference/get_instructor_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Course Schedule by Instructor (Regex-Friendly, Case-Insensitive) — get_instructor_schedule","title":"Filter Course Schedule by Instructor (Regex-Friendly, Case-Insensitive) — get_instructor_schedule","text":"Returns subset course schedule containing courses taught specified instructor. Matching case-insensitive supports regular expressions, allowing flexible partial pattern-based matching. match found, warning issued empty data frame returned.","code":""},{"path":"/reference/get_instructor_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Course Schedule by Instructor (Regex-Friendly, Case-Insensitive) — get_instructor_schedule","text":"","code":"get_instructor_schedule(instructor_name, schedule_df = schedule)"},{"path":"/reference/get_instructor_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Course Schedule by Instructor (Regex-Friendly, Case-Insensitive) — get_instructor_schedule","text":"instructor_name character string (regular expression) used match values INSTRUCTOR column. schedule_df data frame containing course schedule data INSTRUCTOR column. Defaults schedule specified.","code":""},{"path":"/reference/get_instructor_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Course Schedule by Instructor (Regex-Friendly, Case-Insensitive) — get_instructor_schedule","text":"data frame courses assigned instructors matching given pattern, sorted descending enrollment.","code":""},{"path":"/reference/get_instructor_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Course Schedule by Instructor (Regex-Friendly, Case-Insensitive) — get_instructor_schedule","text":"","code":"get_instructor_schedule(\"smith\", schedule_df = schedule)  # partial match #>   P.of.T SUBJ NUMB SECT   CRN                       TITLE NOTES HRS ENRLD #> 1      1 CSCI 4999    1 49388 SPECIAL TOPICS IN CSCI/CSIS         3    12 #>   MAXENRL       TIMES DAYS                       LOCATION      INSTRUCTOR #> 1      15 11:00-12:15  T R 0219 COMPUTER TECHNOLOGY/MATHE Smith, Courtney #>        CAMPUS #> 1 Main Campus get_instructor_schedule(\"^Smith,\", schedule_df = schedule)  # regex: starts with Smith #>   P.of.T SUBJ NUMB SECT   CRN                       TITLE NOTES HRS ENRLD #> 1      1 CSCI 4999    1 49388 SPECIAL TOPICS IN CSCI/CSIS         3    12 #>   MAXENRL       TIMES DAYS                       LOCATION      INSTRUCTOR #> 1      15 11:00-12:15  T R 0219 COMPUTER TECHNOLOGY/MATHE Smith, Courtney #>        CAMPUS #> 1 Main Campus get_instructor_schedule(\"Robinson|Smith\", schedule_df = schedule)  # regex: matches either #>   P.of.T SUBJ NUMB SECT   CRN                       TITLE NOTES HRS ENRLD #> 1      1 CSCI 4999    1 49388 SPECIAL TOPICS IN CSCI/CSIS         3    12 #>   MAXENRL       TIMES DAYS                       LOCATION      INSTRUCTOR #> 1      15 11:00-12:15  T R 0219 COMPUTER TECHNOLOGY/MATHE Smith, Courtney #>        CAMPUS #> 1 Main Campus"},{"path":"/reference/get_subject_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Course Schedule by Subject Code (Regex-Friendly) — get_subject_schedule","title":"Filter Course Schedule by Subject Code (Regex-Friendly) — get_subject_schedule","text":"Returns subset schedule SUBJ (subject code) column matches given pattern. Matching case-insensitive supports regular expressions.","code":""},{"path":"/reference/get_subject_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Course Schedule by Subject Code (Regex-Friendly) — get_subject_schedule","text":"","code":"get_subject_schedule(subject_pattern, schedule)"},{"path":"/reference/get_subject_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Course Schedule by Subject Code (Regex-Friendly) — get_subject_schedule","text":"subject_pattern character string regular expression match subject codes. schedule data frame containing course schedule data SUBJ column.","code":""},{"path":"/reference/get_subject_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Course Schedule by Subject Code (Regex-Friendly) — get_subject_schedule","text":"filtered data frame containing matching subject codes.","code":""},{"path":"/reference/get_subject_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Course Schedule by Subject Code (Regex-Friendly) — get_subject_schedule","text":"","code":"schedule <- data.frame(SUBJ = c(\"CSCI\", \"MATH\", \"STAT\")) get_subject_schedule(\"CSCI\", schedule) #>   SUBJ #> 1 CSCI get_subject_schedule(\"^MATH|^STAT\", schedule) #>   SUBJ #> 1 MATH #> 2 STAT"},{"path":"/reference/get_unique_instructors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Unique Instructor Names — get_unique_instructors","title":"Get Unique Instructor Names — get_unique_instructors","text":"Extracts sorted vector unique, non-empty instructor names schedule data frame.","code":""},{"path":"/reference/get_unique_instructors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Unique Instructor Names — get_unique_instructors","text":"","code":"get_unique_instructors(schedule_df)"},{"path":"/reference/get_unique_instructors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Unique Instructor Names — get_unique_instructors","text":"schedule_df data frame containing INSTRUCTOR column.","code":""},{"path":"/reference/get_unique_instructors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Unique Instructor Names — get_unique_instructors","text":"character vector instructor names, sorted alphabetically.","code":""},{"path":"/reference/get_unique_instructors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Unique Instructor Names — get_unique_instructors","text":"","code":"get_unique_instructors(schedule) #>   [1] \"Ali, Justin\"                \"Allen, Kerrian\"             #>   [3] \"Amphonephong, Vanessa\"      \"Armbruster, Connor\"         #>   [5] \"Armstrong, Darnell\"         \"Armstrong, Desanay\"         #>   [7] \"Awtrey, Jason\"              \"Baker, Danielle\"            #>   [9] \"Barron, Kelly\"              \"Baxter, Ryan\"               #>  [11] \"Benally, J'Rita\"            \"Bostic, Alisha\"             #>  [13] \"Boucher, Samuel\"            \"Bouchon, Karis\"             #>  [15] \"Brant, Jay\"                 \"Bridges-Farrow, Chelsea\"    #>  [17] \"Brown, Cecily\"              \"Brown, Triayna\"             #>  [19] \"Bui, Analie\"                \"Burback, Sarah\"             #>  [21] \"Caldera-Velazquez, Sabryna\" \"Calhoun, Alexandra\"         #>  [23] \"Cave, Michelle\"             \"Cha, Tran\"                  #>  [25] \"Chau, Austin\"               \"Cheng, Lucy\"                #>  [27] \"Clark, Francena\"            \"Coleman, Aerial\"            #>  [29] \"Cottonwood, Dandrew\"        \"Couch, Jonathan\"            #>  [31] \"Cross, Jon\"                 \"Curry, Jossie\"              #>  [33] \"Davis, Kheylen\"             \"Dumas, Gabriela\"            #>  [35] \"Duncan, Jonte\"              \"Dunn, Colton\"               #>  [37] \"Eberle, Zaeem\"              \"Eckert, Kristjan\"           #>  [39] \"Ehlers, Marnita\"            \"Ellis, Ciana\"               #>  [41] \"Elvove, Matthew\"            \"Fang, Mason\"                #>  [43] \"Fernandez, Jesus\"           \"Fhuere, Alexandra\"          #>  [45] \"Findley, Leigh\"             \"Flores, David\"              #>  [47] \"Garcia, Fidel\"              \"Gilbert, Sonja\"             #>  [49] \"Gip, Henry\"                 \"Gooding, Benjamin\"          #>  [51] \"Grange, Danielle\"           \"Greenstein, Derrick\"        #>  [53] \"Griggs, Mercedes\"           \"Halling, Amy\"               #>  [55] \"Hamilton, Vanessa\"          \"Hand, Dallas\"               #>  [57] \"Hang, Lily\"                 \"Hassan, Au\"                 #>  [59] \"Hector, Kristjan\"           \"Henderson, Melissa\"         #>  [61] \"Hickey, Garret\"             \"Hickey, Jordan\"             #>  [63] \"Hoang, Katelyn\"             \"Hocking, Kevin\"             #>  [65] \"Hypio, Alec\"                \"Ivey, Raven\"                #>  [67] \"John, Brittany\"             \"Johnson, James\"             #>  [69] \"Jones, Ariel\"               \"Jones, Te'Keisha\"           #>  [71] \"Karr, Katherine\"            \"Kazee, Amanda\"              #>  [73] \"Kim, Chuan-Kun\"             \"Kincaid, Ariel\"             #>  [75] \"King, Zeid\"                 \"Kramer, James\"              #>  [77] \"Lalau-Hitchcock, Diksha\"    \"Landin, Yahaira\"            #>  [79] \"Leo, Samuel\"                \"Likianos, Sylvanus\"         #>  [81] \"Lopez, Zhiyuan\"             \"Lopez-Serda, Octavio\"       #>  [83] \"Lovan, Timothy\"             \"Lovato, Francisco\"          #>  [85] \"Lovejoy, Othell\"            \"Madison, Shakedia\"          #>  [87] \"Manzanares, Alex\"           \"Marquez, Edgar\"             #>  [89] \"Martinez, Sarah\"            \"Mccluskey, Ilysh\"           #>  [91] \"Mccormick, Jeremy\"          \"Mcroy, Charneissha\"         #>  [93] \"Mcwilliams, Royal\"          \"Melara, Jovanni\"            #>  [95] \"Mergia, Jalond\"             \"Miramontes, Jonnie\"         #>  [97] \"Montoya, Moriah\"            \"Nalla, Adam\"                #>  [99] \"Nelson, Alexander\"          \"Nossem, Kayla\"              #> [101] \"Padilla-Chavez, Bryan\"      \"Paner, Christopher\"         #> [103] \"Pettway, Caitlin\"           \"Piechowski, Kathryn\"        #> [105] \"Pierce, Henry\"              \"Prosser, Camille\"           #> [107] \"Qu, Austin\"                 \"Quintana, Jason\"            #> [109] \"Ramirez, Joel\"              \"Ramos, Daniel\"              #> [111] \"Reffel, Danielle\"           \"Riley, Jorge\"               #> [113] \"Robles, Brian\"              \"Rocha, Chance\"              #> [115] \"Rodriguez, Issiah\"          \"Rose-Williams, Javon\"       #> [117] \"Sandoval, Antonio\"          \"Schippers, Mario\"           #> [119] \"Schmalz, Taylor\"            \"Scott, Kevin\"               #> [121] \"Serrato, Gabriel\"           \"Simmons, Danita\"            #> [123] \"Sloan, Kehaulani\"           \"Smith, Courtney\"            #> [125] \"Sotam, Vanessa\"             \"Soto, Salvador\"             #> [127] \"Steele, Kendra\"             \"Strecker, Jessica\"          #> [129] \"Taherkhani, Vu\"             \"Terriquez Rendon, Samantha\" #> [131] \"Thach, Caleb\"               \"Thompson, Isaac\"            #> [133] \"Thortvedt, Kevin\"           \"Torres, Adam\"               #> [135] \"Trujillo, Matthew\"          \"Varney, Jayla\"              #> [137] \"Villegas, Iris\"             \"Wako, Steffen\"              #> [139] \"Werkele, Leilani\"           \"Wiens, Melanie\"             #> [141] \"Williams, Ross\"             \"Wright, Jazminn\"            #> [143] \"Xiong, Joseph\"              \"Yu, Jing\"                   #> [145] \"al-Abdul, Mamdooh\"          \"al-Agha, Kaarim\"            #> [147] \"al-Ahmadi, Ibrahim\"         \"al-Gad, Fikriyya\"           #> [149] \"al-Hussein, Abdul Waahid\"   \"al-Idris, Musheera\"         #> [151] \"al-Iman, Tahiyya\"           \"al-Jabbar, Ameen\"           #> [153] \"al-Kazi, Haashid\"           \"al-Khawaja, Faadil\"         #> [155] \"al-Mirza, Mahmood\"          \"al-Saad, Najeema\"           #> [157] \"al-Salek, Manaara\"          \"al-Shaikh, Manaahil\"        #> [159] \"al-Siddiqi, Maisoon\"        \"al-Suleiman, Nazmiyya\"      #> [161] \"el-Abood, Tameema\"          \"el-Ahmad, Fahmi\"            #> [163] \"el-Akhtar, Suhaa\"           \"el-Ayoub, Muneefa\"          #> [165] \"el-Begum, Sahl\"             \"el-Jaber, Sitaara\"          #> [167] \"el-Kanan, Mufeed\"           \"el-Naim, Naaifa\"            #> [169] \"el-Nassif, Safwa\"           \"el-Saah, Badruddeen\"        #> [171] \"el-Salman, Fuaad\"           \"el-Sesay, Shaamila\"         #> [173] \"el-Shaker, Fakeeha\"         \"el-Tabatabai, Hibbaan\"      #> [175] \"el-Zaher, Kamaaluddeen\""},{"path":"/reference/ol_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Overload Compensation for One Instructor — ol_comp","title":"Calculate Overload Compensation for One Instructor — ol_comp","text":"Computes prorated overload pay qualified credit hours single instructor based course credit hours, enrollment, institutional overload rules.","code":""},{"path":"/reference/ol_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Overload Compensation for One Instructor — ol_comp","text":"","code":"ol_comp(   instructor_schedule,   L = 4,   U = 9,   rate_per_cr = 2500/3,   reg_load = 12,   favor_institution = TRUE )"},{"path":"/reference/ol_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Overload Compensation for One Instructor — ol_comp","text":"instructor_schedule data frame instructor's courses, columns INSTRUCTOR, ENRLD, HRS. L Lower enrollment threshold overload pay qualification (default = 4). U Upper limit proration; courses ENRLD > U get full-rate pay (default = 9). rate_per_cr Base overload pay per credit hour (default = 2500/3). reg_load Regular teaching load credit hours (default = 12). favor_institution Logical: TRUE (default), prioritizes high-enrollment courses regular load.","code":""},{"path":"/reference/ol_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Overload Compensation for One Instructor — ol_comp","text":"tibble course-level compensation human-readable summary block.","code":""},{"path":"/reference/ol_comp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Overload Compensation for One Instructor — ol_comp","text":"favor_institution = TRUE (default), function assigns high-enrollment qualified courses regular load first, resulting lower compensation low-enrollment courses left overload pay — favors institution. favor_institution = FALSE, function assigns low-enrollment qualified courses regular load first, preserving high-enrollment courses compensation — favors instructor. Note: function assumes instructor_schedule already filtered one instructor. Use get_instructor_schedule() extract instructor’s schedule using flexible, case-insensitive pattern matching (regex supported, e.g., \"smith|jones\").","code":""},{"path":"/reference/ol_comp_byindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","title":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","text":"Retrieves instructor's name index schedule calculates overload compensation using ol_comp(). Returns clean, readable course-level compensation summary.","code":""},{"path":"/reference/ol_comp_byindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","text":"","code":"ol_comp_byindex(   i,   schedule_df,   L = 4,   U = 9,   rate_per_cr = 2500/3,   reg_load = 12,   favor_institution = TRUE )"},{"path":"/reference/ol_comp_byindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","text":"Integer index instructor (returned get_unique_instructors()). schedule_df data frame full course schedule containing INSTRUCTOR column. L Lower enrollment threshold overload pay eligibility (inclusive). Default 4. U Upper enrollment limit proration (inclusive). Default 9. rate_per_cr Overload pay rate per qualified credit hour. Default 2500/3. reg_load Regular teaching load credit hours. Default 12. favor_institution Logical: TRUE (default), favors institution prioritizing high-enrollment courses regular load.","code":""},{"path":"/reference/ol_comp_byindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","text":"Invisibly returns tibble instructor’s course-level overload compensation summary. Also prints formatted version console.","code":""},{"path":"/reference/ol_comp_byindex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","text":"favor_institution = TRUE (default), function assigns high-enrollment courses regular load first, minimizing compensation. favor_institution = FALSE, low-enrollment courses used toward regular load first, preserving high-enrollment courses overload pay. function internally uses get_instructor_schedule(), supports flexible, case-insensitive regex matching instructor names (e.g., \"^smith$\" \"johnson|williams\").","code":""},{"path":"/reference/ol_comp_byindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Overload Compensation for One Instructor (by Index) — ol_comp_byindex","text":"","code":"# Example usage with a schedule dataframe: # ol_comp_byindex(1, schedule_df = schedule)"},{"path":"/reference/ol_comp_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Overload Compensation — ol_comp_summary","title":"Summarize Overload Compensation — ol_comp_summary","text":"Calculates overload compensation instructor based institutional policy. output includes course-level payments, qualified credit hours, readable instructor-level summary block follows instructor's courses.","code":""},{"path":"/reference/ol_comp_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Overload Compensation — ol_comp_summary","text":"","code":"ol_comp_summary(   schedule_df,   instructor = NULL,   L = 4,   U = 9,   rate_per_cr = 2500/3,   reg_load = 12,   favor_institution = TRUE )"},{"path":"/reference/ol_comp_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Overload Compensation — ol_comp_summary","text":"schedule_df data frame containing course schedule information. Must include columns INSTRUCTOR, HRS, ENRLD. instructor Optional string. provided, limits summary single instructor. Default NULL (includes instructors). L Minimum enrollment required overload pay eligibility. Default 4. U Upper threshold proration. Courses ENRLD > U receive full-rate pay. Default 9. rate_per_cr Overload pay rate per credit hour. Default 2500/3. reg_load Regular teaching load credit hours. Default 12. favor_institution Logical: TRUE (default), prioritizes high-enrollment courses regular load.","code":""},{"path":"/reference/ol_comp_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Overload Compensation — ol_comp_summary","text":"tibble combining course-level compensation summary section instructor.","code":""},{"path":"/reference/ol_comp_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Overload Compensation — ol_comp_summary","text":"instructor argument specified, function limits summary instructor. Matching exact case-sensitive unless pre-filtered using get_instructor_schedule(), supports regex-based, case-insensitive pattern matching (e.g., \"smith|jones\").","code":""},{"path":"/reference/schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Schedule Dataset — schedule","title":"Sample Schedule Dataset — schedule","text":"dataset represents sample class schedule used several institutions, slight variations variable names. Users must ensure key variables—HRS, ENRLD, INSTRUCTOR—properly named formatted functions package work correctly.","code":""},{"path":"/reference/schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Schedule Dataset — schedule","text":"","code":"schedule"},{"path":"/reference/schedule.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Schedule Dataset — schedule","text":"object class data.frame 665 rows 15 columns.","code":""},{"path":"/reference/schedule.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample Schedule Dataset — schedule","text":"Included package data/schedule.rda","code":""},{"path":"/reference/schedule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Schedule Dataset — schedule","text":"dataset containing instructor schedules overload analysis. dataset 665 rows 15 columns, including: HRS Credit hours course. ENRLD Number students enrolled course. INSTRUCTOR Name instructor teaching course (anonymized).","code":""},{"path":"/news/index.html","id":"catool-100","dir":"Changelog","previous_headings":"","what":"catool 1.0.0","title":"catool 1.0.0","text":"Initial release catool (Compensation Analysis Tool) R package.","code":""},{"path":"/news/index.html","id":"sparkles-features-1-0-0","dir":"Changelog","previous_headings":"","what":"✨ Features","title":"catool 1.0.0","text":"Calculates overload compensation based institutional policies enrollment thresholds Applies proration logic courses low enrollment (default: 4–9 students) Identifies qualified credit hours exceeding regular teaching load (default: 12 hours) Returns detailed, instructor-level summaries total compensation Supports batch summaries across instructors Offers flexible filtering subject, instructor, department, division Produces tidy, export-ready tibbles audits administrative reporting Includes full walkthrough vignette (catool-walkthrough) explaining policy logic usage examples","code":""},{"path":"/news/index.html","id":"package-infrastructure-1-0-0","dir":"Changelog","previous_headings":"","what":"📦 Infrastructure","title":"catool 1.0.0","text":"Fully documented roxygen2; exported functions include runnable examples Tested Windows, Ubuntu, Fedora, macOS platforms Unit tests included (via testthat) GitHub Actions CI setup multi-platform testing Licensed AGPL-3","code":""}]
